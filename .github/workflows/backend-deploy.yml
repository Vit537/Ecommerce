name: Deploy Backend to Cloud Run

on:
  push:
    branches: [ main, master ]
    paths:
      - 'backend_django/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  REGION: us-central1
  REPOSITORY: ecommerce-registry  # Tu artifact registry
  SERVICE_NAME: ecommerce-backend
  IMAGE_NAME: backend
  CLOUD_SQL_CONNECTION: big-axiom-474503-m5:us-central1:myproject-db

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: backend-cloud-run
      cancel-in-progress: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build Docker image
        id: build
        run: |
          IMAGE_URI="${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          echo "Building Docker image: $IMAGE_URI"
          docker build -t "$IMAGE_URI" ./backend_django
          echo "‚úÖ Docker image built successfully"

      - name: Push Docker image to Artifact Registry
        run: |
          echo "Pushing Docker image: $IMAGE_URI"
          docker push "$IMAGE_URI"
          echo "‚úÖ Docker image pushed successfully"

      - name: Deploy to Cloud Run
        run: |
          echo "Deploying to Cloud Run service: ${{ env.SERVICE_NAME }}"
          gcloud run deploy "${{ env.SERVICE_NAME }}" \
            --image "$IMAGE_URI" \
            --platform managed \
            --region "${{ env.REGION }}" \
            --allow-unauthenticated \
            --add-cloudsql-instances "${{ env.CLOUD_SQL_CONNECTION }}" \
            --set-env-vars "DEBUG=False" \
            --set-env-vars "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" \
            --set-env-vars "DB_NAME=${{ secrets.DB_NAME }}" \
            --set-env-vars "DB_USER=${{ secrets.DB_USER }}" \
            --set-env-vars "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" \
            --set-env-vars "DB_HOST=/cloudsql/${{ env.CLOUD_SQL_CONNECTION }}" \
            --set-env-vars "DB_PORT=5432" \
            --set-env-vars "ALLOWED_HOSTS=*" \
            --set-env-vars "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" \
            --set-env-vars "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" \
            --memory 1Gi \
            --cpu 1 \
            --timeout 300 \
            --min-instances 0 \
            --max-instances 10
          echo "‚úÖ Deployment successful"

      - name: Get service URL
        run: |
          SERVICE_URL=$(gcloud run services describe "${{ env.SERVICE_NAME }}" --region "${{ env.REGION }}" --format="value(status.url)")
          echo "=========================================="
          echo "üéâ Backend deployed successfully!"
          echo "üåê Service URL: $SERVICE_URL"
          echo "=========================================="
          echo ""
          echo "Test your API:"
          echo "  curl $SERVICE_URL/api/"
          echo "  curl $SERVICE_URL/admin/"
          echo ""

      - name: Show deployment info
        run: |
          echo "üì¶ Deployment Details:"
          echo "  - Project: ${{ secrets.GCP_PROJECT_ID }}"
          echo "  - Region: ${{ env.REGION }}"
          echo "  - Service: ${{ env.SERVICE_NAME }}"
          echo "  - Image: $IMAGE_URI"
          echo "  - Cloud SQL: ${{ env.CLOUD_SQL_CONNECTION }}"
